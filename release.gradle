import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

ext {
  currentDate = LocalDateTime.now().format(DateTimeFormatter.ofPattern("d MMM yyyy"))
  releaseVersionRegex = "\\d\\.\\d+\\.\\d+(?:\\.\\d)"
  releaseVersion = '3.49.6-SNAPSHOT'
}


tasks.register('updateVersionNumbers', Copy) {
  into 'docs/'
  from('docs/') {
    include 'manual/annotation-file-utilities/annotation-file-utilities.html',
        'checker-framework-quick-start.html',
        'checker-framework-webpage.html',
        'manual/checker-framework/introduction.tex'

    filter { String line ->
      line = line.replaceAll("checker-framework-${releaseVersionRegex}{0,1}", "checker-framework-${releaseVersion}")
      line.replaceAll("<!-- checker-framework-date -->(.*)<!-- /checker-framework-date -->", "<!-- checker-framework-date -->${currentDate}<!-- /checker-framework-date -->")
    }
  }

  from('docs') {
    include 'manual/checker-framework/external-tools.tex'
    filter { String line ->
      line = line.replaceAll("checker-framework-${releaseVersionRegex}{0,1}", "checker-framework-${releaseVersion}");

      line = line.replaceAll("checker-${releaseVersionRegex}{0,1}", "checker-${releaseVersion}");
      line = line.replaceAll("checker-qual-${releaseVersionRegex}{0,1}", "checker-qual-${releaseVersion}");
      line = line.replaceAll("checker-util-${releaseVersionRegex}{0,1}", "checker-util-${releaseVersion}");

      line = line.replaceAll("checker/${releaseVersionRegex}{0,1}", "checker/${releaseVersion}");
      line = line.replaceAll("checker-qual/${releaseVersionRegex}{0,1}", "checker-qual/${releaseVersion}");
      line = line.replaceAll("checker-util/${releaseVersionRegex}{0,1}", "checker-util/${releaseVersion}");

      line = line.replaceAll("/${releaseVersionRegex}{0,1}/jar", "/${releaseVersion}/");

      line.replaceAll("ext.checkerFrameworkVersion = '${releaseVersionRegex}{0,1}", "ext.checkerFrameworkVersion = '${releaseVersion}");
    }
  }

  from('docs') {
    include 'manual/checker-framework/manual.tex'

    filter { String line ->
      line = line.replaceAll("ReleaseInfo\\}\\{(.*)\\}", "ReleaseInfo}{${releaseVersion} (${currentDate})}");
      line.replaceAll("ReleaseVersion\\}\\{(.*)\\}", "ReleaseVersion}{${releaseVersion}}");
    }
  }

  from('docs') {
    include 'examples/MavenExample/pom.xml'

    filter { String line ->
      line.replaceAll("<!-- checker-framework-version -->(.*)<!-- /checker-framework-version -->", "<!-- checker-framework-version -->${releaseVersion}<!-- /checker-framework-version -->")
    }
  }
}

tasks.register('createCheckerFrameworkZip', Zip) {
  description = 'Creates a zip archive for the Checker Framework.'
  dependsOn('buildAll')
  archiveFileName = "checker-framework-${version}.zip"
  destinationDirectory = file(project.property('destDir'))

  from(layout.projectDirectory) {
    exclude 'api/**',
        'checker/bin/README',
        'checker/bin/javac',
        'checker/dist/*.asc',
        'docs/tutorial/tests/**',
        'docs/tutorial/src/**',
        'docs/tutorial/test/**',
        'docs/tutorial/Makefile',
        'docs/tutorial/README'

    include 'README.html',
        'LICENSE.txt',
        'annotation-file-utilities/bin/**',
        'annotation-file-utilities/dist/**',
        'annotation-file-utilities/LICENSE.txt',
        'checker/bin/**',
        'checker/dist/**',
        'checker/resources/**',
        'docs/CHANGELOG.md',
        'docs/manual/annotation-file-utilities/annotation-file-utilities.html',
        'docs/manual/annotation-file-utilities/annotation-file-format.pdf',
        'docs/manual/annotation-file-utilities/annotation-file-format.html',
        'docs/manual/annotation-file-utilities/*.png',
        'docs/manual/checker-framework/manual.html',
        'docs/manual/checker-framework/manual.pdf',
        'docs/manual/checker-framework/*.svg',
        'docs/manual/checker-framework/manual001.png',
        'docs/manual/checker-framework/manual001.svg',
        'docs/examples/InterningExample.java',
        'docs/examples/InterningExampleWithWarnings.java',
        'docs/examples/NullnessExample.java',
        'docs/examples/NullnessExampleWithWarnings.java',
        'docs/examples/NullnessReleaseTests.java',
        'docs/examples/units-extension/Demo.java',
        'docs/examples/units-extension/Expected.txt',
        'docs/examples/units-extension/Frequency.java',
        'docs/examples/units-extension/FrequencyRelations.java',
        'docs/examples/units-extension/Hz.java',
        'docs/examples/units-extension/kHz.java',
        'docs/examples/units-extension/Makefile',
        'docs/examples/units-extension/README',
        'docs/examples/MavenExample/pom.xml',
        'docs/examples/MavenExample/README',
        'docs/examples/MavenExample/src/main/java/org/checkerframework/example/MavenExample.java',
        'docs/tutorial/**'
  }

  from('dataflow/manual/dataflow.pdf') {
    into 'docs/manual/checker-framework/'

    rename 'dataflow.pdf', 'checker-framework-dataflow-manual.pdf'
  }

  // Copy to CFLogo.png to multiple places.
  from('docs/logo/Logo/CFLogo.png') {
    into 'docs/manual/checker-framework/'
  }

  from('docs/logo/Logo/CFLogo.png') {
    into 'docs/tutorial/'
  }

  from('docs/logo/Logo/CFLogo.png') {
    into 'docs/tutorial/webpages'
  }
}

tasks.register('zipMavenExamples', Zip) {
  description = 'Creates a zip archive for the Maven example.'
  archiveFileName = "maven-examples-${version}.zip"
  destinationDirectory = file(project.property('destDir'))
  from('docs/examples/MavenExample')
}

